{"version":3,"sources":["components/Card/Box/Box.js","components/Card/Card.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Box","props","className","bookInfo","volumeInfo","imageLinks","src","smallThumbnail","alt","title","authors","publisher","description","Card","state","books","url","URL","searchParams","append","this","match","params","lang","fetch","mode","then","res","json","setState","items","getGoogleBooks","prevProps","map","book","idx","key","Component","Header","to","style","color","langList","Footer","href","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yVAkCeA,G,kBA7BH,SAACC,GACT,OACI,yBAAKC,UAAU,sBACX,6BAASA,UAAU,SACf,yBAAKA,UAAU,cACX,4BAAQA,UAAU,oBAEkC,MAAxCD,EAAME,SAASC,WAAWC,WACnB,0CAEA,yBAAKC,IAAKL,EAAME,SAASC,WAAWC,WAAWE,eAAgBC,IAAI,OAK1F,yBAAKN,UAAU,iBACX,yBAAKA,UAAU,WACX,2BACI,gCAASD,EAAME,SAASC,WAAWK,OADvC,IACuD,+CAAWR,EAAME,SAASC,WAAWM,SAD5F,IAC6G,qDAAYT,EAAME,SAASC,WAAWO,WAC/I,6BACCV,EAAME,SAASC,WAAWQ,mBCiBxCC,G,kNAnCXC,MAAQ,CAACC,MAAO,I,+DAEE,IAAD,OACPC,EAAM,IAAIC,IAAI,+CACpBD,EAAIE,aAAaC,OAAO,IAAKC,KAAKnB,MAAMoB,MAAMC,OAAOC,MACrDC,MAAMR,EAAK,CACPS,KAAM,SACPC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UACZF,MAAK,SAAAE,GACJ,EAAKC,SAAS,CAACd,MAAOa,EAAKE,a,0CAK/BV,KAAKW,mB,yCAGUC,GACXZ,KAAKnB,MAAMoB,MAAMC,OAAOC,OAASS,EAAUX,MAAMC,OAAOC,MACxDH,KAAKW,mB,+BAMT,OACI,yBAAK7B,UAAU,aAAckB,KAAKN,MAAMC,MAAMkB,KAAI,SAACC,EAAMC,GACrD,OAAO,kBAAC,EAAD,CAAKC,IAAKD,EAAKhC,SAAU+B,Y,GA7B7BG,cCiBJC,G,MAjBA,SAACrC,GACZ,OACI,4BAAQC,UAAU,YACd,yBAAKA,UAAU,YACX,kBAAC,IAAD,CAAMqC,GAAG,KAAI,wBAAIrC,UAAU,mBAAmBsC,MAAO,CAACC,MAAO,UAAhD,WAEjB,yBAAKvC,UAAU,QACX,4BAAMD,EAAMyC,SAAST,KAAI,SAACV,EAAMY,GAC5B,OAAO,wBAAIC,IAAKD,GAChB,kBAAC,IAAD,CAAMI,GAAI,IAAMhB,EAAMiB,MAAO,CAACC,MAAO,YAAalB,YCEvDoB,EAbA,WACX,OACI,4BAAQzC,UAAU,sBACd,yBAAKA,UAAU,6BACf,2BACI,yCADJ,OAC8B,uBAAG0C,KAAK,+BAAR,QAD9B,yBAEwB,uBAAGA,KAAK,kCAAR,aCiBrBC,E,uKAfX,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,CAAQwC,SAJE,CAAC,SAAU,KAAM,OAAQ,OAAQ,MAAO,QAAS,SAAU,aAAc,QAAS,MAAO,UAAW,aAAc,MAAO,IAAK,MAAO,QAAS,IAAK,SAK7J,yBAAKxC,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,KAAlB,8FACA,kBAAC,IAAD,CAAOA,KAAK,SAASC,UAAWnC,MAGpC,kBAAC,EAAD,W,GAbUwB,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCXNgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,UACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3617108f.chunk.js","sourcesContent":["import React from 'react'\n\nimport 'bulma/css/bulma.css'\nimport './Box.css'\n\nconst Box = (props) => {\n    return (\n        <div className=\"box box-dist is-12\">\n            <article className=\"media\">\n                <div className=\"media-left\">\n                    <figure className=\"image is-128x128\">\n                        { (() => {\n                            if (props.bookInfo.volumeInfo.imageLinks == null) {\n                                return <span>No Image</span>\n                            } else {\n                                return <img src={props.bookInfo.volumeInfo.imageLinks.smallThumbnail} alt=\"\"/>\n                            }}\n                        ) ()}\n                    </figure>\n                </div>\n                <div className=\"media-content\">\n                    <div className=\"content\">\n                        <p>\n                            <strong>{props.bookInfo.volumeInfo.title}</strong> <small>著者/{props.bookInfo.volumeInfo.authors}</small> <small>出版社/{props.bookInfo.volumeInfo.publisher}</small>\n                            <br />\n                            {props.bookInfo.volumeInfo.description}\n                        </p>\n                    </div>\n                </div>\n            </article>\n        </div>\n    )\n}\n\nexport default Box;","import React, {Component} from 'react';\n\nimport Box from './Box/Box'\n\nimport './Card.css'\n\nclass Card extends Component {\n    state = {books: []}\n\n    getGoogleBooks() {\n        const url = new URL('https://www.googleapis.com/books/v1/volumes');\n        url.searchParams.append('q', this.props.match.params.lang);\n        fetch(url, {\n            mode: 'cors',\n        }).then(res => {\n            return res.json();\n        }).then(json => {\n            this.setState({books: json.items});\n        })\n    }\n\n    componentDidMount() {\n        this.getGoogleBooks()\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.lang !== prevProps.match.params.lang) {\n            this.getGoogleBooks()\n        }\n        \n    }\n\n    render() {\n        return(\n            <div className=\"container\">{ this.state.books.map((book, idx) => {\n                return <Box key={idx} bookInfo={book} />\n                }) }\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport './Header.css'\nimport 'bulma/css/bulma.css'\n\nconst Header = (props) => {\n    return (\n        <header className=\"header-s\">\n            <div className=\"logo-img\">\n                <Link to='/'><h1 className=\"title font-title\" style={{color: 'black'}}>Livre</h1></Link>\n            </div>\n            <div className=\"tabs\">\n                <ul>{ props.langList.map((lang, idx) => {\n                    return <li key={idx}>\n                    <Link to={'/' + lang} style={{color: '#228b22'}}>{lang}</Link></li>\n                }) }\n                </ul>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nimport 'bulma/css/bulma.css'\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer-dist footer\">\n            <div className=\"content has-text-centered\">\n            <p>\n                <strong>Livre</strong> by <a href=\"https://twitter.com/jyouj__\">YouJ</a>.\n                This sourse code is <a href=\"https://github.com/jyouj/livre\">here.</a>\n            </p>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport './App.css';\n\nimport Card from './components/Card/Card'\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\n\nclass App extends Component {\n  render () {\n    const langs = [\"Python\", \"Go\", \"Ruby\", \"Java\", \"PHP\", \"Swift\", \"Kotlin\", \"JavaScript\", \"React\", \"Vue\", \"Angular\", \"TypeScript\", \"C++\", \"C\", \"SQL\", \"Scala\", \"R\", \"CSS\"];\n\n    return(\n      <div className=\"app\">\n        <Header langList={langs} />\n        <div className=\"card-dist\">\n          <Switch>\n            <Route exact path=\"/\">表示したい言語を選んでください</Route>\n            <Route path='/:lang' component={Card} />\n          </Switch>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}